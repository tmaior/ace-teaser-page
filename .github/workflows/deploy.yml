name: Deploy to AWS Lightsail
on:
  push:
    branches:
      - main
env:
  ECR_REPOSITORY: test-ace-teaser-site
  IMAGE_TAG: latest
  AWS_REGION: us-west-2
  ECR_REGISTRY: 975635808270.dkr.ecr.us-west-2.amazonaws.com
jobs:
  build-and-push-to-ecr:
    name: Build and Push to ECR
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Build, tag, and push image to Amazon ECR
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
  deploy-to-lightsail:
    name: Deploy to Lightsail
    runs-on: ubuntu-latest
    needs: build-and-push-to-ecr
    steps:
      - name: Deploy to Lightsail instance
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.LIGHTSAIL_HOST }}
          username: ${{ secrets.LIGHTSAIL_USER }}
          key: ${{ secrets.LIGHTSAIL_SSH_KEY }}
          script: |
            # Configure AWS credentials for the runner
            aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws configure set region ${{ env.AWS_REGION }}
            
            # Login to ECR
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ env.ECR_REGISTRY }}
            
            # Pull the new image
            docker pull ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
            
            # Stop and remove the old container if it exists
            if [ "$(docker ps -q -f name=${{ env.ECR_REPOSITORY }})" ]; then
                docker stop ${{ env.ECR_REPOSITORY }}
                docker rm ${{ env.ECR_REPOSITORY }}
            fi
            
            # Run the new container
            docker run -d -p 80:80 --name ${{ env.ECR_REPOSITORY }} --restart unless-stopped ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ env.IMAGE_TAG }}
